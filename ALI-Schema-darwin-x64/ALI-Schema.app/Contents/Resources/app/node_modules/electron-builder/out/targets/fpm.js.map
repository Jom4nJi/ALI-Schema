{
  "version": 3,
  "file": "fpm.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/fpm.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { LinuxBuildOptions, Arch } from \"../metadata\"\nimport { smarten, Target, PlatformPackager } from \"../platformPackager\"\nimport { use, getTempName, debug, exec } from \"../util/util\"\nimport { installPrefix } from \"../linuxPackager\"\nimport * as path from \"path\"\nimport { downloadFpm } from \"../util/binDownload\"\nimport { tmpdir } from \"os\"\nimport { remove, emptyDir, readdir, readFile, outputFile } from \"fs-extra-p\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\n\nconst template = require(\"lodash.template\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport class FpmTarget extends Target {\n  private readonly options = Object.assign({}, this.packager.platformSpecificBuildOptions, (<any>this.packager.devMetadata.build)[this.name])\n\n  private readonly fpmPath: Promise<string>\n\n  private readonly packageFiles: Promise<Array<string>>\n  private readonly scriptFiles: Promise<Array<string>>\n\n  constructor(name: string, private packager: PlatformPackager<LinuxBuildOptions>, cleanupTasks: Array<() => Promise<any>>) {\n    super(name)\n\n    const tempDir = path.join(tmpdir(), getTempName(\"electron-builder-linux\"))\n    const tempDirPromise = emptyDir(tempDir)\n      .then(() => {\n        cleanupTasks.push(() => remove(tempDir))\n        return tempDir\n      })\n    this.packageFiles = this.computePackageFiles(tempDirPromise)\n    this.scriptFiles = this.createScripts(tempDirPromise)\n\n    if (process.platform === \"win32\" || process.env.USE_SYSTEM_FPM === \"true\") {\n      this.fpmPath = BluebirdPromise.resolve(\"fpm\")\n    }\n    else {\n      this.fpmPath = downloadFpm(process.platform === \"darwin\" ? \"1.5.1-20150715-2.2.2\" : \"1.5.0-2.3.1\", process.platform === \"darwin\" ? \"osx\" : `linux-x86${process.arch === \"ia32\" ? \"\" : \"_64\"}`)\n    }\n  }\n\n  private async computePackageFiles(tempDirPromise: Promise<string>): Promise<Array<string>> {\n    const tempDir = await tempDirPromise\n\n    const promises: Array<Promise<Array<string>>> = []\n    if (this.packager.platformSpecificBuildOptions.desktop == null) {\n      promises.push(this.computeDesktopIconPath(tempDir))\n    }\n\n    promises.push(this.computeDesktop(tempDir))\n\n    return Array.prototype.concat.apply([], await BluebirdPromise.all(promises))\n  }\n\n  // must be name without spaces and other special characters, but not product name used\n  private async computeDesktopIconPath(tempDir: string): Promise<Array<string>> {\n    try {\n      const mappings: Array<string> = []\n      const pngIconsDir = path.join(this.packager.buildResourcesDir, \"icons\")\n      for (let file of (await readdir(pngIconsDir))) {\n        if (file!.endsWith(\".png\") || file!.endsWith(\".PNG\")) {\n          // If parseInt encounters a character that is not a numeral in the specified radix,\n          // it returns the integer value parsed up to that point\n          try {\n            const size = parseInt(file!, 10)\n            if (size > 0) {\n              mappings.push(`${pngIconsDir}/${file}=/usr/share/icons/hicolor/${size}x${size}/apps/${this.packager.appInfo.name}.png`)\n            }\n          }\n          catch (e) {\n            console.error(e)\n          }\n        }\n      }\n\n      return mappings\n    }\n    catch (e) {\n      return this.createFromIcns(tempDir)\n    }\n  }\n\n  private async createScripts(tempDirPromise: Promise<string>): Promise<Array<string>> {\n    const tempDir = await tempDirPromise\n    const defaultTemplatesDir = path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\")\n\n    const templateOptions = Object.assign({\n      // old API compatibility\n      executable: this.packager.appInfo.productName,\n    }, this.packager.platformSpecificBuildOptions)\n\n    const afterInstallTemplate = this.packager.platformSpecificBuildOptions.afterInstall || path.join(defaultTemplatesDir, \"after-install.tpl\")\n    const afterInstallFilePath = writeConfigFile(tempDir, afterInstallTemplate, templateOptions)\n\n    const afterRemoveTemplate = this.packager.platformSpecificBuildOptions.afterRemove || path.join(defaultTemplatesDir, \"after-remove.tpl\")\n    const afterRemoveFilePath = writeConfigFile(tempDir, afterRemoveTemplate, templateOptions)\n\n    return await BluebirdPromise.all<string>([afterInstallFilePath, afterRemoveFilePath])\n  }\n\n  async build(destination: string, target: string, appOutDir: string, arch: Arch): Promise<any> {\n    const scripts = await this.scriptFiles\n    const packager = this.packager\n    const appInfo = packager.appInfo\n\n    const projectUrl = await appInfo.computePackageUrl()\n    if (projectUrl == null) {\n      throw new Error(\"Please specify project homepage, see https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-homepage\")\n    }\n\n    const options = this.options\n    const author = options.maintainer || `${packager.metadata.author.name} <${packager.metadata.author.email}>`\n    const synopsis = options.synopsis\n    const args = [\n      \"-s\", \"dir\",\n      \"-t\", target,\n      \"--architecture\", arch === Arch.ia32 ? \"i386\" : \"amd64\",\n      \"--name\", appInfo.name,\n      \"--force\",\n      \"--after-install\", scripts[0],\n      \"--after-remove\", scripts[1],\n      \"--description\", smarten(target === \"rpm\" ? options.description! : `${synopsis || \"\"}\\n ${options.description}`),\n      \"--maintainer\", author,\n      \"--vendor\", options.vendor || author,\n      \"--version\", appInfo.version,\n      \"--package\", destination,\n      \"--url\", projectUrl,\n    ]\n\n    if (target === \"deb\") {\n      args.push(\"--deb-compression\", options.compression || (packager.devMetadata.build.compression === \"store\" ? \"gz\" : \"xz\"))\n    }\n    else if (target === \"rpm\") {\n      // args.push(\"--rpm-compression\", options.compression || (this.devMetadata.build.compression === \"store\" ? \"none\" : \"xz\"))\n      args.push(\"--rpm-os\", \"linux\")\n\n      if (synopsis != null) {\n        args.push(\"--rpm-summary\", smarten(synopsis))\n      }\n    }\n\n    let depends = options.depends\n    if (depends == null) {\n      if (target === \"deb\") {\n        depends = [\"libappindicator1\", \"libnotify-bin\"]\n      }\n      else {\n        depends = []\n      }\n    }\n    else if (!Array.isArray(depends)) {\n      if (typeof depends === \"string\") {\n        depends = [<string>depends]\n      }\n      else {\n        throw new Error(`depends must be Array or String, but specified as: ${depends}`)\n      }\n    }\n\n    for (let dep of depends) {\n      args.push(\"--depends\", dep)\n    }\n\n    use(packager.metadata.license || packager.devMetadata.license, it => args.push(\"--license\", it!))\n    use(appInfo.buildNumber, it => args.push(\"--iteration\", it!))\n\n    use(options.fpm, it => args.push(...<any>it))\n\n    args.push(`${appOutDir}/=${installPrefix}/${appInfo.productName}`)\n    args.push(...<any>(await this.packageFiles)!)\n    await exec(await this.fpmPath, args)\n  }\n\n  private async computeDesktop(tempDir: string): Promise<Array<string>> {\n    const appInfo = this.packager.appInfo\n    const tempFile = path.join(tempDir, appInfo.productName + \".desktop\")\n    await outputFile(tempFile, this.packager.platformSpecificBuildOptions.desktop || `[Desktop Entry]\nName=${appInfo.productName}\nComment=${this.packager.platformSpecificBuildOptions.description || appInfo.description}\nExec=\"${installPrefix}/${appInfo.productName}/${appInfo.productName}\"\nTerminal=false\nType=Application\nIcon=${appInfo.name}\n`)\n    return [`${tempFile}=/usr/share/applications/${appInfo.productName}.desktop`]\n  }\n\n  private async createFromIcns(tempDir: string): Promise<Array<string>> {\n    const output = await exec(\"icns2png\", [\"-x\", \"-o\", tempDir, path.join(this.packager.buildResourcesDir, \"icon.icns\")])\n    debug(output)\n\n    const imagePath = path.join(tempDir, \"icon_256x256x32.png\")\n\n    function resize(size: number): BluebirdPromise<any> {\n      const sizeArg = `${size}x${size}`\n      return exec(\"gm\", [\"convert\", \"-size\", sizeArg, imagePath, \"-resize\", sizeArg, path.join(tempDir, `icon_${size}x${size}x32.png`)])\n    }\n\n    const promises: Array<Promise<any>> = [resize(24), resize(96)]\n    if (!output.includes(\"is32\")) {\n      promises.push(resize(16))\n    }\n    if (!output.includes(\"ih32\")) {\n      promises.push(resize(48))\n    }\n    if (!output.toString().includes(\"icp6\")) {\n      promises.push(resize(64))\n    }\n    if (!output.includes(\"it32\")) {\n      promises.push(resize(128))\n    }\n\n    await BluebirdPromise.all(promises)\n\n    const appName = this.packager.appInfo.name\n\n    function createMapping(size: string) {\n      return `${tempDir}/icon_${size}x${size}x32.png=/usr/share/icons/hicolor/${size}x${size}/apps/${appName}.png`\n    }\n\n    return [\n      createMapping(\"16\"),\n      createMapping(\"24\"),\n      createMapping(\"32\"),\n      createMapping(\"48\"),\n      createMapping(\"64\"),\n      createMapping(\"96\"),\n      createMapping(\"128\"),\n      createMapping(\"256\"),\n      createMapping(\"512\"),\n    ]\n  }\n}\n\nasync function writeConfigFile(tempDir: string, templatePath: string, options: any): Promise<string> {\n  const config = template(await readFile(templatePath, \"utf8\"),\n    {\n      // set interpolate explicitly to avoid troubles with templating of installer.nsi.tpl\n      interpolate: /<%=([\\s\\S]+?)%>/g\n    })(options)\n\n  const outputPath = path.join(tempDir, path.basename(templatePath, \".tpl\"))\n  await outputFile(outputPath, config)\n  return outputPath\n}"
  ]
}
