{
  "version": 3,
  "file": "macPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/macPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { PlatformPackager, BuildInfo, Target } from \"./platformPackager\"\nimport { Platform, MasBuildOptions, Arch, MacOptions } from \"./metadata\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { isEmptyOrSpaces } from \"./util/util\"\nimport { log, warn, task } from \"./util/log\"\nimport { createKeychain, deleteKeychain, CodeSigningInfo, generateKeychainName, findIdentity, appleCertificatePrefixes, CertType } from \"./codeSign\"\nimport deepAssign = require(\"deep-assign\")\nimport { signAsync, flatAsync, BaseSignOptions, SignOptions, FlatOptions } from \"electron-osx-sign-tf\"\nimport { DmgTarget } from \"./targets/dmg\"\nimport { createCommonTarget, DEFAULT_TARGET } from \"./targets/targetFactory\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./util/awaiter\")\n\nexport default class MacPackager extends PlatformPackager<MacOptions> {\n  codeSigningInfo: Promise<CodeSigningInfo | null>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    if (this.options.cscLink == null) {\n      this.codeSigningInfo = BluebirdPromise.resolve(null)\n    }\n    else {\n      const keychainName = generateKeychainName()\n      cleanupTasks.push(() => deleteKeychain(keychainName))\n      this.codeSigningInfo = createKeychain(keychainName, this.options.cscLink, this.getCscPassword(), this.options.cscInstallerLink, this.options.cscInstallerKeyPassword)\n    }\n  }\n\n  async getIconPath(): Promise<string | null> {\n    let iconPath = this.platformSpecificBuildOptions.icon || this.devMetadata.build.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.getDefaultIcon(\"icns\") : path.resolve(this.projectDir, iconPath)\n  }\n\n  normalizePlatformSpecificBuildOptions(options: MacOptions | n): MacOptions {\n    return super.normalizePlatformSpecificBuildOptions(options == null ? (<any>this.info.devMetadata.build).osx : options)\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: () => Target) => void, cleanupTasks: Array<() => Promise<any>>): void {\n    for (let name of targets) {\n      if (name === \"dir\") {\n        continue\n      }\n\n      if (name === DEFAULT_TARGET) {\n        mapper(\"dmg\", () => new DmgTarget(this))\n        mapper(\"zip\", () => new Target(\"zip\"))\n      }\n      else if (name === \"dmg\") {\n        mapper(\"dmg\", () => new DmgTarget(this))\n      }\n      else {\n        mapper(name, () => name === \"mas\" ? new Target(\"mas\") : createCommonTarget(name))\n      }\n    }\n  }\n\n  get platform() {\n    return Platform.MAC\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    const packOptions = await this.computePackOptions(outDir, this.computeAppOutDir(outDir, arch), arch)\n    let nonMasPromise: Promise<any> | null = null\n\n    const hasMas = targets.length !== 0 && targets.some(it => it.name === \"mas\")\n\n    if (!hasMas || targets.length > 1) {\n      const appOutDir = this.computeAppOutDir(outDir, arch)\n      nonMasPromise = this.doPack(packOptions, outDir, appOutDir, arch, this.platformSpecificBuildOptions)\n        .then(() => this.sign(appOutDir, null))\n        .then(() => {\n          this.packageInDistributableFormat(appOutDir, targets, postAsyncTasks)\n        })\n    }\n\n    if (hasMas) {\n      // osx-sign - disable warning\n      const appOutDir = path.join(outDir, \"mas\")\n      const masBuildOptions = deepAssign({}, this.platformSpecificBuildOptions, (<any>this.devMetadata.build)[\"mas\"])\n      //noinspection JSUnusedGlobalSymbols\n      await this.doPack(Object.assign({}, packOptions, {\n        platform: \"mas\",\n        \"osx-sign\": false,\n        generateFinalBasename: function () { return \"mas\" }\n      }), outDir, appOutDir, arch, masBuildOptions)\n      await this.sign(appOutDir, masBuildOptions)\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private static async findIdentity(certType: CertType, name?: string | null): Promise<string | null> {\n    let identity = process.env.CSC_NAME || name\n    if (isEmptyOrSpaces(identity)) {\n      if (process.env.CSC_IDENTITY_AUTO_DISCOVERY === \"false\") {\n        return null\n      }\n      return await findIdentity(certType)\n    }\n    else {\n      identity = identity.trim()\n      for (let prefix of appleCertificatePrefixes) {\n        checkPrefix(identity, prefix)\n      }\n      const result = await findIdentity(certType, identity)\n      if (result == null) {\n        throw new Error(`Identity name \"${identity}\" is specified, but no valid identity with this name in the keychain`)\n      }\n      return result\n    }\n  }\n\n  private async sign(appOutDir: string, masOptions: MasBuildOptions | null): Promise<void> {\n    let codeSigningInfo = await this.codeSigningInfo\n    if (codeSigningInfo == null) {\n      if (process.env.CSC_LINK != null) {\n        throw new Error(\"codeSigningInfo is null, but CSC_LINK defined\")\n      }\n\n      const identity = await MacPackager.findIdentity(masOptions == null ? \"Developer ID Application\" : \"3rd Party Mac Developer Application\", this.platformSpecificBuildOptions.identity)\n      if (identity == null) {\n        const message = \"App is not signed: CSC_LINK or CSC_NAME are not specified, and no valid identity in the keychain, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing\"\n        if (masOptions == null) {\n          warn(message)\n          return\n        }\n        else {\n          throw new Error(message)\n        }\n      }\n\n      if (masOptions != null) {\n        const installerName = masOptions == null ? null : (await MacPackager.findIdentity(\"3rd Party Mac Developer Installer\", this.platformSpecificBuildOptions.identity))\n        if (installerName == null) {\n          throw new Error(\"Cannot find valid installer certificate: CSC_LINK or CSC_NAME are not specified, and no valid identity in the keychain, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing\")\n        }\n\n        codeSigningInfo = {\n          name: identity,\n          installerName: installerName,\n        }\n      }\n      else {\n        codeSigningInfo = {\n          name: identity,\n        }\n      }\n    }\n    else {\n      if (codeSigningInfo.name == null && masOptions == null) {\n        throw new Error(\"codeSigningInfo.name is null, but CSC_LINK defined\")\n      }\n      if (masOptions != null && codeSigningInfo.installerName == null) {\n        throw new Error(\"Signing is required for mas builds but CSC_INSTALLER_LINK is not specified\")\n      }\n    }\n\n    const identity = codeSigningInfo.name\n\n    const baseSignOptions: BaseSignOptions = {\n      app: path.join(appOutDir, `${this.appInfo.productName}.app`),\n      platform: masOptions == null ? \"darwin\" : \"mas\",\n      keychain: <any>codeSigningInfo.keychainName,\n      version: this.info.electronVersion\n    }\n\n    const signOptions = Object.assign({\n      identity: identity,\n    }, (<any>this.devMetadata.build)[\"osx-sign\"], baseSignOptions)\n\n    const resourceList = await this.resourceList\n\n    const customSignOptions = masOptions || this.platformSpecificBuildOptions\n    if (customSignOptions.entitlements != null) {\n      signOptions.entitlements = customSignOptions.entitlements\n    }\n    else {\n      const p = `entitlements.${masOptions == null ? \"osx\" : \"mas\"}.plist`\n      if (resourceList.includes(p)) {\n        signOptions.entitlements = path.join(this.buildResourcesDir, p)\n      }\n    }\n\n    if (customSignOptions.entitlementsInherit != null) {\n      signOptions[\"entitlements-inherit\"] = customSignOptions.entitlementsInherit\n    }\n    else {\n      const p = `entitlements.${masOptions == null ? \"osx\" : \"mas\"}.inherit.plist`\n      if (resourceList.includes(p)) {\n        signOptions[\"entitlements-inherit\"] = path.join(this.buildResourcesDir, p)\n      }\n    }\n\n    await task(`Signing app (identity: ${identity})`, this.doSign(signOptions))\n\n    if (masOptions != null) {\n      const pkg = path.join(appOutDir, `${this.appInfo.productName}-${this.appInfo.version}.pkg`)\n      await this.doFlat(Object.assign({\n        pkg: pkg,\n        identity: codeSigningInfo.installerName,\n      }, baseSignOptions))\n      this.dispatchArtifactCreated(pkg, `${this.appInfo.name}-${this.appInfo.version}.pkg`)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return signAsync(opts)\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doFlat(opts: FlatOptions): Promise<any> {\n    return flatAsync(opts)\n  }\n\n  protected packageInDistributableFormat(appOutDir: string, targets: Array<Target>, promises: Array<Promise<any>>): void {\n    for (let t of targets) {\n      const target = t.name\n      if (t instanceof DmgTarget) {\n        promises.push(t.build(appOutDir))\n      }\n      else if (target !== \"mas\") {\n        log(`Creating MacOS ${target}`)\n        // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n        const outFile = path.join(appOutDir, this.generateName2(target, \"mac\", false))\n        promises.push(this.archiveApp(target, appOutDir, outFile)\n          .then(() => this.dispatchArtifactCreated(outFile, this.generateName2(target, \"mac\", true))))\n      }\n    }\n  }\n}\n\nfunction checkPrefix(name: string, prefix: string) {\n  if (name.startsWith(prefix)) {\n    throw new Error(`Please remove prefix \"${prefix}\" from the specified name — appropriate certificate will be chosen automatically`)\n  }\n}"
  ]
}
